swirl()
add2 <- function(x,y) {}
add2 <- function(x,y) {
x + y
}
add2(3,6)
above <- functio(x, n=10) {
use <- x > n
x[use]
}
above <- functio(x, n=10) {
use <- x > n
x[use]
}
x <- 1:20
above(x)
above <- functio(x, n=10) {
use <- x > n
x[use]
}
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numberic(nc)
for(i in 1:nc) {
mean[i] <- mean(y[,i])
}
means
}
columnmeans(airquality)
columnmean(airquality)
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
mean[i] <- mean(y[,i])
}
means
}
colummean(airquality)
columnmean(airquality)
search()
help(lapply)
library(swirl)
swirl()
install.packages('swirl')
library(swirl)
swirl()
library(swirl)
install_from_swirl("R Programming")
library(swirl)
install_from_swirl('R Programming')
swirl
swirl()
library(swirl)
install_from_swirl(R Programming)
library(swirl)
install_from_swirl('R Programming')
library(swirl)
install_course_zip(Desktop/swirl_courses-master.zip", multi=TRUE, which_course="R Programming"")
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- %+7
x <- 5+&
x <- 5+7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, times = 40))
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Siya")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z,), 100)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
clas(my_vector)
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(data = my_vector, nrow = 4, ncol = 5)
matrx(data = 1:20, nrows = 4, ncols = 5)
matrix(data = 1:20, nrows = 4, ncols = 5)
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Getting_and_Cleaning_Data")
library(swirl)
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Getting_and_Cleaning_Data")
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Data_Analysis")
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Regression_Models")
swirl()
0
bye()
library(swirl)
swirl()
library(swirl)
swirl()
flags
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE)
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, lambda)
rpois(5, lambda, mean = 10)
rpois(5, lambda)
rpois()
sample(5, rpois(10, lambda))
rpois(10, lambda)
rpois(5, lamdba = 10)
rpois(5, lambda = 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
swirl()
"this expression will be printed"; 7 + 13; exp(0+1i*pi)
2 ^ 1024
-2 ^ 1024
library(swirl)
swirl()
str(iris)
head(iris)
tail(iris)
new_csv <- iris
write.csv <- c(new_csv, './DataScience', row.names = FALSE)
write.csv <- c(new_csv, './DataScience/dummydata.csv', row.names = FALSE)
var1 <- 1:5
var2 <- (1:5)/10
var3 <- c("R", "and", "Data Mining", "Examples", "Case Studies")
df1 <- data.frame(var1, var2, var3)
na,es(df1) <- c("VariableInt", 'VariableReal', "VariableChar")
names(df1) <- c("VariableInt", "VariableReal", "VariableChar")
getwd()
setwd("/LocalHost/DataScience")
setwd("Localhost/DataScience")
write.csv(df1, "./data/dummyData.csv", row.names = FALSE)
write.csv(df1, "./DataScience/dummyData.csv", row.names = FALSE)
write.csv(df1, "dummyData.csv", row.names = FALSE)
df2 <- read.csv("dummyData.csv")
print(df2)
fim(iris)
setwd("~/")
getwd()
dim(iris)
names(iris)
str(iris)
attributes(iris)
sum(iris$Sepal.Width)
iris[1:10, "Sepal.Length"]
summary(iris)
quantile(iris$Sepal.Width)
var(iris$Sepal.Length)
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
table(iris$Species)
pie(table(iris$Species))
barplot(table(iris$Species))
cov(iris$Sepal.Length, iris$Petal.Width)
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
aggregate(Sepal.Length - Species, summary, data=iris)
aggregate(Sepal.Length ~ Species, summary, data=iris)
boxplot(Sepal.Length~Species, data=iris)
with(iris, plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species)))
plot(jitter(iris$Sepal.Length), jitter(iris$Sepal.Width))
pairs(iris)
library(swirl)
swirl()
0
exit()
0
bye()
swirl()
install.packages("tidyr")
install.packages("lubridate")
install.packages("mboost")
install.packages("foreign")
install.packages("RODBC")
install.packages("scatterplot3d")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv('path2csv', stringAsFactors = FALSE)
help(read.csv)
mydf <- read.csv(path2csv, header = TRUE, sep = ",", stringAsFactors = FALSE)
mydf <- read.csv(path2csv, header = TRUE, sep = ",",...)
mydf <- read.csv(path2csv, header = TRUE, sep = ",")
mydf
head(mydf)
str(MYDF)
str(mydf)
mydf <- read.csv(path2csv, stringAsFactor)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm('mydf')
cran
?manip
select(cran, ip_id, package, country
)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(X:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cra2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size == 1000)
mutate(cran3, )
mutate(cran3, correct_size == size/1000)
mutate(cran3, correct_size == size)
mutate(cran3, correct_size = size)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(tbl)
tbl <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
help(group_by)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
?n
?n_distinct
reset()
submit()
?n
install.packages("swirl")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
getwd()
setwd('Localhost/DataScience/specdata')
pollutantmean <- function(directory, pollutant, id = 1:332) {}
## in the 'id' vector (ignoring NA values)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
## Return the mean of the pollutant across all monitors list
?mean
return(mean(pollutant, na.rm = TRUE))
pollutant <- "nitrate" || "sulphate",
directory <- "specdata";
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
pollutant <- "nitrate" || "sulphate";
data <- read.csv('001.csv', header=T, method="curl")
library(RCurl)
data <- read.csv('001.csv', header=T, method="curl")
data <- read.csv('001.csv', header=T)
head(data)
mean(Data[,pollutant],na.rm=TRUE)
pollutantmean(specdata,"nitrate", 1:10)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean(specdata, "nitrate", 1:10)
pollutantmean(specdata, "niterate", 1:10)
pollutantmean(specdata, "sulphate", 1:10)
pollutantmean('specdata', 'nitrate', c(1:100,141))
pollutantmean('specdata', 'nitrate', 1)
pollutantmean('specdata', 'nitrate', 23)
source(pollutantmean.R)
pollutantmean('specdata', 'nitrate', 23)
?paste
